#!/usr/bin/env node

var program = require('commander');

program
    .version(require('../_package_data').version)
    .option('-p, --production', 'Build for production (minify)')
    .option('-f, --force', 'Force the action, overriding checks and guards')
    .option('-c, --configuration <name>', 'A configuration to use')
    .option('--host <host>', 'Set the development server host, eg 0.0.0.0 for external access (default `localhost`)')
    .option('--port <port>', 'Set the development server port (default `5000`)')
    .option('--use-cache', 'Cache API responses (for development)')
    .parse(process.argv);

if (program.production) {
    process.env.NODE_ENV = 'production';
} else {
    process.env.NODE_ENV = 'development';
}

// Payload is either an Object or null.
function continueCommand(payload) {

    var _command = program.args[0];
    var _options = {
        force: program.force || false,
        configuration: program.configuration || null,
        production: program.production || false,
        use_cache: program.useCache || false,
        host: program.host || 'localhost',
        port: program.port || '5000',
        payload: payload,
    }

    switch (_command) {
        case 'deploy':
            process.env.NODE_ENV = 'production';
            require('../deployment')(process.cwd(), _options);
            break;
        case 'build':
            require('../development/build')(process.cwd(), _options);
            break;
        case 'develop':
            require('../development/develop')(process.cwd(), _options);
            break;
        default:
            if(_command) {
                console.log('Unknown command: `' + _command + '`');
            } else {
                console.log('No command given.');
            }
            console.log('You must specify a command, `marqueestatic <command>`. See `marqueestatic --help`.')
            process.exit(1);
    }
}


if(process.stdin.isTTY) {
    // The command is being called un-piped.
    continueCommand(null);
} else {
    // The command is being piped a payload from stdin.
    var payload_str = ''
    process.stdin.setEncoding('utf8');
    process.stdin.on('readable', function() {
        var chunk = process.stdin.read();
        if (chunk !== null) {
            payload_str += chunk;
        }
    });

    process.stdin.on('end', function() {
        console.log("Payload is|" + payload_str)
        try {
            var payload = JSON.parse(payload_str);
        } catch (e) {
            console.error('Payload is not valid JSON!\nError from JSON.parse:\n')
            console.error(e.message)
            console.error(e.stack)
            process.exit(1)
        }
        continueCommand(payload);
    });
}